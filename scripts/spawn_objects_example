#!/usr/bin/env python

import math
import random

import arm_scenario_simulator as arm_sim
import baxter_interface
import rospy
from baxter_interface import CHECK_VERSION
from geometry_msgs.msg import Point, Quaternion
from std_msgs.msg import Empty
from std_msgs.msg import String


def axisToQuaternion(axis, angle):
    """
    :param axis: [int]
    :param angle: (float) in radian
    :return: (Quarternion object)
    """
    sin = math.sin(angle / 2)
    return Quaternion(w=math.cos(angle / 2), x=sin * axis[0], y=sin * axis[1], z=sin * axis[2])


def randomColor():
    """
    :return: [int] random rgb color
    """
    return [random.randint(0, 255) for _ in range(3)]


class Environment:
    def __init__(self):
        self.objects = {}
        self.previous_lever_pushed = None
        rospy.Subscriber('/environment/reset', Empty, self.resetCallback, queue_size=1)

        self.loop_rate = rospy.Rate(100)  # in Hz
        rospy.Subscriber("babbler", String, self.callback)

    def callback(self, msg):
        print("received msg: ", msg.data)
        if msg.data == "change_color":
            self.changeColor()
        else:
            print("[WARNING] msg: {} not handled".format(msg))

    def resetCallback(self, message):
        self.deleteObjects()
        self.init()

    def deleteObjects(self):
        # Make a copy before deleting elements
        keys = self.objects.keys()[:]
        for obj in keys:
            self.objects[obj].delete()

    def addObject(self, obj):
        if obj:
            self.objects[obj.gazebo_name] = obj

    def changeColor(self):
        self.objects['table1'].set_table_color(rgba=randomColor())
        self.objects['button1'].set_base_color(rgba=randomColor())
        self.objects['button1'].set_button_color(rgba=randomColor())
        self.objects['lever1'].set_base_color(rgba=randomColor())
        self.objects['lever1'].set_lever_color(rgba=randomColor())
        print("colors changed!")

    def init(self):
        """ Create handles to (and spawn) simulated object in Gazebo"""

        def r(limit):
            """
            Draw for a random distribution in [-limit, limit]
            """
            return random.random() * 2 * limit - limit

        z_above_table = 0.8 # with a safety margin
        self.addObject(arm_sim.Table('table1').spawn(Point(x=0.6, y=0, z=0),
                                                     orientation=axisToQuaternion([0, 0, 1], -1.570796),
                                                     static=False,
                                                     table_type="DREAM_table"))

        self.addObject(arm_sim.GazeboObject('cube1').spawn('DREAM_cube', Point(x=0.4 + r(0.2), y=r(0.4), z=z_above_table)))
        self.addObject(arm_sim.GazeboObject('cube2').spawn('DREAM_cube', Point(x=0.5 + r(0.2), y=r(0.2), z=z_above_table)))
        self.addObject(
            arm_sim.GazeboObject('cylinder1').spawn('DREAM_cylinder', Point(x=0.5 + r(0.2), y=r(0.2), z=z_above_table)))
        self.addObject(
            arm_sim.GazeboObject('cylinder2').spawn('DREAM_cylinder', Point(x=0.5 + r(0.2), y=r(0.2), z=z_above_table)))

        # deterministic
        self.addObject(arm_sim.Button('button1').spawn(Point(x=0.6, y=0.30, z=z_above_table), button_type="DREAM_simple_button"))
        self.addObject(arm_sim.Lever('lever1').spawn(Point(x=0.5, y=0.1, z=z_above_table),
                                                     orientation=axisToQuaternion([0, 0, 1], math.pi / 4)))

        # the following objects are not spawn, cause already present in the world before this script is run
        self.addObject(arm_sim.Pocket('table/pocket'))
        self.addObject(arm_sim.Light('light_table0', color=[255, 0, 255]))
        self.addObject(arm_sim.Light('light_table1'))
        self.addObject(arm_sim.Light('light_table2', color=[0, 255, 255]))

        # to let the publishers notify the master, so that the following commands are not discarded
        rospy.sleep(1)
        # Initialize objects attributes (color) and lights states
        # force=True ensures sending a ros message to gazebo to set the gazebo_object's color,
        # no matter what the current python object state is
        self.objects['light_table0'].set_light_state(on=False, force=True)
        # when force is False or ommited, the python object only publish
        # a ros message if it considers it is necessary
        self.objects['light_table1'].set_light_state(on=False, force=True)
        # it is recommended to force at initialization time to ensure having a consistent state
        self.objects['light_table2'].set_light_state(on=False, force=True)

        # Warning color changes can only be seen through camera
        # So everything is normal if you don't see changes on gazebo

        color_button1 = [20, 60, 10]
        color_button2 = [150, 190, 150]
        self.objects['button1'].set_base_color(rgba=color_button1)
        self.objects['button1'].set_button_color(rgba=color_button2)

        color_lever1 = [30, 60, 100]
        color_lever2 = [150, 90, 150]
        self.objects['lever1'].set_base_color(rgba=color_lever1)
        self.objects['lever1'].set_lever_color(rgba=color_lever2)

        self.objects['cube1'].set_color(rgba=[230, 220, 10])
        self.objects['cube2'].set_color(rgba=[200, 20, 20])
        self.objects['cylinder1'].set_color(rgba=[50, 50, 220])

    def run(self):
        while not rospy.is_shutdown():
            try:
                self.rules()
            except KeyError:
                pass  # When deleting models, key errors may occur
            self.loop_rate.sleep()

    def rules(self):
        objects = self.objects

        # Basic association : a light is on if only and only if a button is pressed
        objects['light_table0'].set_light_state(objects['button1'].is_pressed())

        # Complex association : a light is on if one of two objects is active, and the color depdend on a third object !
        light1_condition = objects['table/pocket'].is_active() or objects['lever1'].is_pushed()
        light1_color = [255, 126, 80] if objects['button1'].is_pressed() else [20, 126, 255]
        objects['light_table1'].set_light_state(on=light1_condition, color=light1_color)

        self.previous_lever_pushed = objects['lever1'].is_pushed()


def main():
    rospy.init_node("DREAM_environment_demo")
    # Enable Robot
    rs = baxter_interface.RobotEnable(CHECK_VERSION)
    print("Previous state: {}".format(rs.state()))
    rs.enable()
    print("Robot enabled")
    env = Environment()
    try:
        env.init()
        # env.changeColor()
        rospy.on_shutdown(env.deleteObjects)
        print("Running. Ctrl-c to quit")
        env.run()
    except Exception:
        env.deleteObjects()
        raise


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
